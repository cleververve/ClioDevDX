@IsTest
private class OrderTriggerHandlerTest {
    
	@IsTest 
    private static void createPositiveInvoiceLinesTest() {
        Id pricebookId = Test.getStandardPricebookId();
        Account acc = new Account();
        acc.Name = 'test';
        acc.Type = 'Prospect';
        acc.CurrencyIsoCode = 'DKK';
        acc.BillingCountry = 'Denmark';
        acc.Country_Code__c = 'DK';
        acc.Market__c = 'Denmark';
        insert acc;
        Opportunity opp = new Opportunity();
        opp.Name = 'testOpp';
        opp.CloseDate = Date.today();
        opp.StageName = 'Prospecting';
        opp.AccountId = acc.Id;
        opp.Type = 'Downgrade';
        opp.Check_Bill_To_Account__c = true;
        opp.Check_Invoice_Product_Start_Date__c = true;
        opp.Check_Zero_Activated__c = true;
        opp.CurrencyIsoCode = 'DKK';
        opp.RecordTypeId = Schema.SObjectType.Opportunity.getRecordTypeInfosByName().get('Partner').getRecordTypeId();
        insert opp;
        Contact con = new Contact();
        con.FirstName = 'John';
        con.LastName = 'Test';
        con.AccountId = acc.Id;
        insert con;
        SBQQ__QuoteProcess__c qProc = new SBQQ__QuoteProcess__c();
        qProc.CurrencyIsoCode = 'DKK';
        qProc.Name = 'Denmark Quote Process';
        qProc.SBQQ__Default__c = false;
        qProc.SBQQ__GuidedOnly__c = false;
        qProc.SBQQ__ProductAutoSelected__c = true;
        insert qProc;
        SBQQ__Quote__c q = new SBQQ__Quote__c();
        q.Bill_To_Account__c = acc.Id;
        q.CurrencyIsoCode = 'DKK';
        q.SBQQ__Account__c = acc.Id;
        q.SBQQ__ExpirationDate__c = Date.today()+30;
        q.SBQQ__EndDate__c = Date.today();
        q.SBQQ__EndDate__c = Date.today().addYears(3).addDays(-1);
        q.SBQQ__Opportunity2__c = opp.Id;
        q.SBQQ__PaymentTerms__c = 'Net 30';
        q.SBQQ__Primary__c = true;
        q.SBQQ__PrimaryContact__c = con.Id;
        q.SBQQ__QuoteProcessId__c = qProc.Id;
        q.SBQQ__Status__c = 'New';
        q.SBQQ__SubscriptionTerm__c = 36;
        q.SBQQ__Type__c = 'Quote';
        q.SBQQ__PriceBook__c = pricebookId;
        q.SBQQ__PricebookId__c = pricebookId;
        q.SBQQ__BillingFrequency__c = 'One Time';
        insert q;
        Product2 prod = new Product2();
        prod.Country_Code__c = 'DK';
        prod.CurrencyIsoCode = 'DKK';
        prod.Family = 'Portal';
        prod.IsActive = true;
        prod.Level__c = 'Indskolning';
        prod.Name = 'Billedkunstfaget.dk (1.-2. klasse)';
        prod.NAV_Type__c = 'Item';
        prod.Navision_Prod_No__c = 23100;
        prod.Product_Category__c = 'Portal';
        prod.Product_No__c = 391;
        prod.Product_Type__c = 'Clio Online Portal';
        prod.SBQQ__SubscriptionPricing__c = 'Fixed Price';
        prod.SBQQ__SubscriptionTerm__c = 12;
        prod.ProductCode = 'BKIN';
        insert prod;
        PriceBookEntry pbe = new PriceBookEntry();
        pbe.CurrencyIsoCode = 'DKK';
        pbe.IsActive = true;
        pbe.Pricebook2Id = pricebookId;
        pbe.Product2Id = prod.Id;
        pbe.UnitPrice = 39;
        insert pbe;
        SBQQ__QuoteLine__c qL = new SBQQ__QuoteLine__c();
        qL.SBQQ__ListPrice__c = 39;
        qL.SBQQ__Product__c = prod.Id;
        qL.SBQQ__Quote__c = q.Id;
        qL.SBQQ__PricebookEntryId__c = pbe.Id;
        qL.SBQQ__Quantity__c = 1;
        insert qL;
        opp.StageName = 'Deal Desk';
        update opp;
        opp.StageName = 'Closed Won';
        Test.startTest();
        update opp;
        Test.stopTest();
        Order ord = [SELECT Status, Clio_First_invoice_date__c FROM Order WHERE AccountId = :acc.Id];
        ord.Status = 'Sent for Invoicing';
        ord.Clio_First_invoice_date__c = Date.today().addDays(1);
        update ord;
    }
    
    @IsTest 
    private static void createNegativeInvoiceLinesTest() {
        Id pricebookId = Test.getStandardPricebookId();
        Account acc = new Account();
        acc.Name = 'test';
        acc.Type = 'Prospect';
        acc.CurrencyIsoCode = 'DKK';
        acc.BillingCountry = 'Denmark';
        acc.Country_Code__c = 'DK';
        acc.Market__c = 'Denmark';
        insert acc;
        Opportunity opp = new Opportunity();
        opp.Name = 'testOpp';
        opp.Type = 'Downgrade';
        opp.CloseDate = Date.today();
        opp.StageName = 'Prospecting';
        opp.AccountId = acc.Id;
        opp.CurrencyIsoCode = 'DKK';
        opp.Check_Bill_To_Account__c = true;
        opp.Check_Invoice_Product_Start_Date__c = true;
        opp.Check_Zero_Activated__c = true;
        opp.RecordTypeId = Schema.SObjectType.Opportunity.getRecordTypeInfosByName().get('Partner').getRecordTypeId();
        insert opp;
        Contact con = new Contact();
        con.FirstName = 'John';
        con.LastName = 'Test';
        con.AccountId = acc.Id;
        insert con;
        SBQQ__QuoteProcess__c qProc = new SBQQ__QuoteProcess__c();
        qProc.CurrencyIsoCode = 'DKK';
        qProc.Name = 'Denmark Quote Process';
        qProc.SBQQ__Default__c = false;
        qProc.SBQQ__GuidedOnly__c = false;
        qProc.SBQQ__ProductAutoSelected__c = true;
        insert qProc;
        SBQQ__Quote__c q = new SBQQ__Quote__c();
        q.Bill_To_Account__c = acc.Id;
        q.CurrencyIsoCode = 'DKK';
        q.SBQQ__Account__c = acc.Id;
        q.SBQQ__ExpirationDate__c = Date.today()+30;
        q.SBQQ__EndDate__c = Date.today();
        q.SBQQ__EndDate__c = Date.today().addYears(3).addDays(-1);
        q.SBQQ__Opportunity2__c = opp.Id;
        q.SBQQ__PaymentTerms__c = 'Net 30';
        q.SBQQ__Primary__c = true;
        q.SBQQ__PrimaryContact__c = con.Id;
        q.SBQQ__QuoteProcessId__c = qProc.Id;
        q.SBQQ__Status__c = 'New';
        q.SBQQ__SubscriptionTerm__c = 36;
        q.SBQQ__Type__c = 'Quote';
        q.SBQQ__PriceBook__c = pricebookId;
        q.SBQQ__PricebookId__c = pricebookId;
        q.SBQQ__BillingFrequency__c = 'Semiannual';
        insert q;
        Product2 prod = new Product2();
        prod.Country_Code__c = 'DK';
        prod.CurrencyIsoCode = 'DKK';
        prod.Family = 'Portal';
        prod.IsActive = true;
        prod.Level__c = 'Indskolning';
        prod.Name = 'Billedkunstfaget.dk (1.-2. klasse)';
        prod.NAV_Type__c = 'Item';
        prod.Navision_Prod_No__c = 23100;
        prod.Product_Category__c = 'Portal';
        prod.Product_No__c = 391;
        prod.Product_Type__c = 'Clio Online Portal';
        prod.SBQQ__SubscriptionPricing__c = 'Fixed Price';
        prod.SBQQ__SubscriptionTerm__c = 12;
        prod.ProductCode = 'BKIN';
        insert prod;
        PriceBookEntry pbe = new PriceBookEntry();
        pbe.CurrencyIsoCode = 'DKK';
        pbe.IsActive = true;
        pbe.Pricebook2Id = pricebookId;
        pbe.Product2Id = prod.Id;
        pbe.UnitPrice = 39;
        insert pbe;
        SBQQ__QuoteLine__c qL = new SBQQ__QuoteLine__c();
        qL.SBQQ__ListPrice__c = 39;
        qL.SBQQ__Product__c = prod.Id;
        qL.SBQQ__Quote__c = q.Id;
        qL.SBQQ__PricebookEntryId__c = pbe.Id;
        qL.SBQQ__Quantity__c = 1;
        qL.SBQQ__PriorQuantity__c = 10;
        insert qL;
        opp.StageName = 'Deal Desk';
        update opp;
        opp.StageName = 'Closed Won';
        Test.startTest();
        update opp;
        Test.stopTest();
        Order ord = [SELECT Status FROM Order WHERE AccountId = :acc.Id];
        ord.Status = 'Sent for Invoicing';
        update ord;
        OrderTriggerHandler handler = new OrderTriggerHandler();
        List<OrderItem> ois = handler.filterClioOnlinePortalProducts(new Map<Id, Order>{ord.Id => ord});
        handler.prepareNegativeInvoiceLinesForOrderProduct(ois[0]);
    }
}